#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/uart.h"
#include "driver/gpio.h"
#include "portmacro.h"
#include "rom/gpio.h"
#include "driver/ledc.h"
#include "esp_err.h"

char *tx_data = "7"; 

static void IRAM_ATTR send7(void *arg) // Tx send data
{
   
    gpio_isr_handler_add(32, send7, NULL);
    gpio_intr_enable(32);
}
void UART(void) // UART Setup both Rx and Tx
{
	 uart_config_t uart_config = {
        .baud_rate = 9600,
        .data_bits = UART_DATA_8_BITS,
        .parity   = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,
        .source_clk = UART_SCLK_APB,
    };
    uart_param_config(UART_NUM_0, &uart_config);
    uart_set_pin(UART_NUM_0, 1, 3, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    uart_driver_install(UART_NUM_0, 1024, 1024, 0, NULL, 0);	
}
void Button(void)
{
    //tx_data
	gpio_pad_select_gpio(32);
	gpio_set_direction(32, GPIO_MODE_INPUT);
	gpio_set_pull_mode(32, GPIO_PULLDOWN_ONLY); /* set as pull-down */
}

void app_main(void)
{
	UART();
    Button();

    while(1)
    {

	if(gpio_get_level(32)==1) // if button pressed
		{
		   uart_write_bytes(UART_NUM_0, tx_data, strlen(tx_data)); // send verification to GUI
         }
			vTaskDelay(500 / portTICK_PERIOD_MS);		
     }
               
}
